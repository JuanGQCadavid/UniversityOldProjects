# testdata/test2016205.ewe
start:
	a := 0
	b := 0
	c := 0
	memory := 0
	d := 0
	e := 0
	f := 0
	one := 1
	cS := 0
	zero := 0
	bS := 0
	operator2 := 0
	operator1 := 0
	sp := 1014
# Push(100)
	sp := sp - one
	operator1 := 100
	M[sp + 0] := operator1
# Assign
	a := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
# Push(200)
	sp := sp - one
	operator1 := 200
	M[sp + 0] := operator1
# Assign
	b := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
# Push(300)
	sp := sp - one
	operator1 := 300
	M[sp + 0] := operator1
# Assign
	c := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
# Push(400)
	sp := sp - one
	operator1 := 400
	M[sp + 0] := operator1
# Assign
	d := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
# Identifier
	sp := sp - one
	operator1 := a
	M[sp + 0] := operator1
# Identifier
	sp := sp - one
	operator1 := bS
	M[sp + 0] := operator1
# Add
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 + operator2
	sp := sp + one
	M[sp + 0] := operator1
# Store
	memory := M[sp + 0]
# Identifier
	sp := sp - one
	operator1 := cS
	M[sp + 0] := operator1
# Add
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 + operator2
	sp := sp + one
	M[sp + 0] := operator1
# Store
	memory := M[sp + 0]
# Push(11)
	sp := sp - one
	operator1 := 11
	M[sp + 0] := operator1
# Push(22)
	sp := sp - one
	operator1 := 22
	M[sp + 0] := operator1
# Times
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 * operator2
	sp := sp + one
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Divide
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 / operator2
	sp := sp + one
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Divide
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 / operator2
	sp := sp + one
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Divide
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 / operator2
	sp := sp + one
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Divide
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 / operator2
	sp := sp + one
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Divide
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 / operator2
	sp := sp + one
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Divide
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 / operator2
	sp := sp + one
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Divide
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 / operator2
	sp := sp + one
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Divide
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 / operator2
	sp := sp + one
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Divide
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 / operator2
	sp := sp + one
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Divide
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 / operator2
	sp := sp + one
	M[sp + 0] := operator1
# Add
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 + operator2
	sp := sp + one
	M[sp + 0] := operator1
# Assign
	e := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
# Push(23)
	sp := sp - one
	operator1 := 23
	M[sp + 0] := operator1
# Push(23)
	sp := sp - one
	operator1 := 23
	M[sp + 0] := operator1
# Store
	memory := M[sp + 0]
# Add
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 + operator2
	sp := sp + one
	M[sp + 0] := operator1
# Store
	memory := M[sp + 0]
# Push(23)
	sp := sp - one
	operator1 := 23
	M[sp + 0] := operator1
# Store
	memory := M[sp + 0]
# Add
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 + operator2
	sp := sp + one
	M[sp + 0] := operator1
# Store
	memory := M[sp + 0]
# Push(11)
	sp := sp - one
	operator1 := 11
	M[sp + 0] := operator1
# Push(22)
	sp := sp - one
	operator1 := 22
	M[sp + 0] := operator1
# Times
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 * operator2
	sp := sp + one
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Divide
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 / operator2
	sp := sp + one
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Divide
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 / operator2
	sp := sp + one
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Divide
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 / operator2
	sp := sp + one
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Divide
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 / operator2
	sp := sp + one
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Divide
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 / operator2
	sp := sp + one
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Divide
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 / operator2
	sp := sp + one
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Divide
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 / operator2
	sp := sp + one
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Divide
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 / operator2
	sp := sp + one
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Divide
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 / operator2
	sp := sp + one
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Divide
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 / operator2
	sp := sp + one
	M[sp + 0] := operator1
# Add
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 + operator2
	sp := sp + one
	M[sp + 0] := operator1
# Assign
	f := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
end:	halt
# Variables
equ a	M[0]
equ b	M[1]
equ c	M[2]
equ memory	M[3]
equ d	M[4]
equ e	M[5]
equ f	M[6]
equ one	M[7]
equ cS	M[8]
equ zero	M[9]
equ bS	M[10]
equ operator2	M[11]
equ operator1	M[12]
equ sp	M[13]
equ stack	M[1014]
