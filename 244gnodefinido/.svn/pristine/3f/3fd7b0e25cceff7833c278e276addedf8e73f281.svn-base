# testdata/test2016211.ewe
start:
	a := 0
	b := 0
	c := 0
	memory := 0
	d := 0
	f := 0
	one := 1
	zero := 0
	cero := 0
	operator2 := 0
	uno := 0
	operator1 := 0
	sp := 1013
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Assign
	a := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
# Push(20)
	sp := sp - one
	operator1 := 20
	M[sp + 0] := operator1
# Assign
	b := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
# Push(30)
	sp := sp - one
	operator1 := 30
	M[sp + 0] := operator1
# Assign
	c := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
# Push(1)
	sp := sp - one
	operator1 := 1
	M[sp + 0] := operator1
# Assign
	uno := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
# Push(0)
	sp := sp - one
	operator1 := 0
	M[sp + 0] := operator1
# Assign
	cero := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
# Identifier
	sp := sp - one
	operator1 := a
	M[sp + 0] := operator1
# Identifier
	sp := sp - one
	operator1 := b
	M[sp + 0] := operator1
# Add
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 + operator2
	sp := sp + one
	M[sp + 0] := operator1
# Identifier
	sp := sp - one
	operator1 := c
	M[sp + 0] := operator1
# Add
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 + operator2
	sp := sp + one
	M[sp + 0] := operator1
# Identifier
	sp := sp - one
	operator1 := d
	M[sp + 0] := operator1
# Add
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 + operator2
	sp := sp + one
	M[sp + 0] := operator1
# Identifier
	sp := sp - one
	operator1 := f
	M[sp + 0] := operator1
# Add
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 + operator2
	sp := sp + one
	M[sp + 0] := operator1
# Assign
	a := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
# Identifier
	sp := sp - one
	operator1 := uno
	M[sp + 0] := operator1
# Identifier
	sp := sp - one
	operator1 := cero
	M[sp + 0] := operator1
# Times
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 * operator2
	sp := sp + one
	M[sp + 0] := operator1
# Identifier
	sp := sp - one
	operator1 := uno
	M[sp + 0] := operator1
# Store
	memory := M[sp + 0]
# Add
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 + operator2
	sp := sp + one
	M[sp + 0] := operator1
# Recall
	sp := sp - one
	M[sp + 0] := memory
# Add
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 + operator2
	sp := sp + one
	M[sp + 0] := operator1
# Assign
	b := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
end:	halt
# Variables
equ a	M[0]
equ b	M[1]
equ c	M[2]
equ memory	M[3]
equ d	M[4]
equ f	M[5]
equ one	M[6]
equ zero	M[7]
equ cero	M[8]
equ operator2	M[9]
equ uno	M[10]
equ operator1	M[11]
equ sp	M[12]
equ stack	M[1013]
