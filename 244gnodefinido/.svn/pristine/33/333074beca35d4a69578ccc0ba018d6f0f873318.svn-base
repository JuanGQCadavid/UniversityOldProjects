# testdata/test2016207.ewe
start:
	a := 0
	b := 0
	memory := 0
	one := 1
	p := 0
	zero := 0
	aS := 0
	r := 0
	s := 0
	t := 0
	operator2 := 0
	w := 0
	operator1 := 0
	x := 0
	y := 0
	z := 0
	sp := 1017
# Identifier
	sp := sp - one
	operator1 := a
	M[sp + 0] := operator1
# Identifier
	sp := sp - one
	operator1 := b
	M[sp + 0] := operator1
# Add
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 + operator2
	sp := sp + one
	M[sp + 0] := operator1
# Assign
	w := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
# Identifier
	sp := sp - one
	operator1 := a
	M[sp + 0] := operator1
# Identifier
	sp := sp - one
	operator1 := b
	M[sp + 0] := operator1
# Sub
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 - operator2
	sp := sp + one
	M[sp + 0] := operator1
# Assign
	x := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
# Identifier
	sp := sp - one
	operator1 := a
	M[sp + 0] := operator1
# Identifier
	sp := sp - one
	operator1 := b
	M[sp + 0] := operator1
# Sub
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 - operator2
	sp := sp + one
	M[sp + 0] := operator1
# Assign
	y := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
# Identifier
	sp := sp - one
	operator1 := a
	M[sp + 0] := operator1
# Identifier
	sp := sp - one
	operator1 := b
	M[sp + 0] := operator1
# Times
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 * operator2
	sp := sp + one
	M[sp + 0] := operator1
# Assign
	z := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
# Identifier
	sp := sp - one
	operator1 := a
	M[sp + 0] := operator1
# Push(10)
	sp := sp - one
	operator1 := 10
	M[sp + 0] := operator1
# Module
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 % operator2
	sp := sp + one
	M[sp + 0] := operator1
# Assign
	t := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
# Identifier
	sp := sp - one
	operator1 := aS
	M[sp + 0] := operator1
# Recall
	sp := sp - one
	M[sp + 0] := memory
# Add
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 + operator2
	sp := sp + one
	M[sp + 0] := operator1
# Clear
	memory := zero
	sp := sp - one
	M[sp + 0] := memory
# Add
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 + operator2
	sp := sp + one
	M[sp + 0] := operator1
# Assign
	r := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
# Identifier
	sp := sp - one
	operator1 := aS
	M[sp + 0] := operator1
# Minus
	operator1 := M[sp + 0]
	memory := memory - operator1
	M[sp + 0] := memory
# Plus
	operator1 := M[sp + 0]
	memory := memory + operator1
	M[sp + 0] := memory
# Store
	memory := M[sp + 0]
# Recall
	sp := sp - one
	M[sp + 0] := memory
# Add
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 + operator2
	sp := sp + one
	M[sp + 0] := operator1
# Assign
	s := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
# Clear
	memory := zero
	sp := sp - one
	M[sp + 0] := memory
# Clear
	memory := zero
	sp := sp - one
	M[sp + 0] := memory
# Add
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 + operator2
	sp := sp + one
	M[sp + 0] := operator1
# Clear
	memory := zero
	sp := sp - one
	M[sp + 0] := memory
# Add
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 + operator2
	sp := sp + one
	M[sp + 0] := operator1
# Recall
	sp := sp - one
	M[sp + 0] := memory
# Add
	operator2 := M[sp + 0]
	operator1 := M[sp + 1]
	operator1 := operator1 + operator2
	sp := sp + one
	M[sp + 0] := operator1
# Assign
	p := M[sp + 0]
# Write
	operator1 := M[sp + 0]
	sp := sp + one
	writeInt(operator1)
end:	halt
# Variables
equ a	M[0]
equ b	M[1]
equ memory	M[2]
equ one	M[3]
equ p	M[4]
equ zero	M[5]
equ aS	M[6]
equ r	M[7]
equ s	M[8]
equ t	M[9]
equ operator2	M[10]
equ w	M[11]
equ operator1	M[12]
equ x	M[13]
equ y	M[14]
equ z	M[15]
equ sp	M[16]
equ stack	M[1017]
